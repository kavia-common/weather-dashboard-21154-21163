{"is_source_file": true, "format": "JavaScript", "description": "This file contains helper functions for interacting with the OpenWeatherMap API, including API URL construction, error handling, and functions for fetching weather data and city suggestions, exported for use in a React frontend project.", "external_files": ["fetch"], "external_methods": ["fetch"], "published": ["owSuggestCities", "owOneCall", "owSelfCheck"], "classes": [], "methods": [{"name": "warnIfMissingKeyOnce()", "description": "Warns once if the OpenWeather API key is missing or improperly set in environment variables.", "scope": "", "scopeKind": ""}, {"name": "ensureOk(response, defaultMessage)", "description": "Checks the fetch response for success; throws an error with detailed message if not OK.", "scope": "", "scopeKind": ""}, {"name": "buildOWUrl(pathAndQuery)", "description": "Constructs the full URL for an OpenWeather API request, logging the request info.", "scope": "", "scopeKind": ""}, {"name": "getOneCallPath(lat, lon, key, preferV3 = false)", "description": "Determines the API path for One Call requests, supporting version preference.", "scope": "", "scopeKind": ""}, {"name": "owCurrentAndForecast(lat, lon, key)", "description": "Fallback method to fetch current weather and 7-day forecast if One Call API is unauthorized.", "scope": "", "scopeKind": ""}, {"name": "owSuggestCities(query, limit = 5)", "description": "Exports the function to suggest city names based on user query, using OpenWeather geocoding API.", "scope": "", "scopeKind": ""}, {"name": "owOneCall(lat, lon)", "description": "Exports the function to fetch current weather and forecast data via the One Call API, with fallback mechanisms.", "scope": "", "scopeKind": ""}, {"name": "owSelfCheck()", "description": "Exports a diagnostic function that performs a test request to verify API connectivity and permissions.", "scope": "", "scopeKind": ""}], "calls": ["fetch", "console.warn", "console.info", "JSON.parse", "JSON.stringify"], "search-terms": ["OpenWeather", "API URL", "weather fetch", "geocoding", "OneCall", "env variables", "fallback", "diagnostics"], "state": 2, "file_id": 13, "knowledge_revision": 83, "git_revision": "57db027d8fcdd9c7c416623610321d1d365603d8", "revision_history": [{"29": ""}, {"51": "81849b733866fff455e4981b99f38c589d28d97e"}, {"57": "5a7dc454f0b919f5630106389652fa4e97801f9f"}, {"60": "326a243c9314a816972e71b4d0da0ea10ef58ddd"}, {"63": "1fd1fc6dde7128df6df9fb9531ec911d2c28a5d7"}, {"77": "921e1964e320d21b93ba7b80779bcbe9985e06e7"}, {"83": "57db027d8fcdd9c7c416623610321d1d365603d8"}], "ctags": [{"_type": "tag", "name": "ICON_BASE", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^const ICON_BASE = 'https:\\/\\/openweathermap.org\\/img\\/wn';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "OW_API_ORIGIN", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^const OW_API_ORIGIN = 'https:\\/\\/api.openweathermap.org';$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "buildOWUrl", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^function buildOWUrl(pathAndQuery) {$/", "language": "JavaScript", "kind": "function", "signature": "(pathAndQuery)"}, {"_type": "tag", "name": "didWarnMissingKey", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^let didWarnMissingKey = false;$/", "language": "JavaScript", "kind": "variable"}, {"_type": "tag", "name": "ensureOk", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^async function ensureOk(response, defaultMessage) {$/", "language": "JavaScript", "kind": "function", "signature": "(response, defaultMessage)"}, {"_type": "tag", "name": "getOneCallPath", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^function getOneCallPath(lat, lon, key, preferV3 = false) {$/", "language": "JavaScript", "kind": "function", "signature": "(lat, lon, key, preferV3 = false)"}, {"_type": "tag", "name": "owCurrentAndForecast", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^async function owCurrentAndForecast(lat, lon, key) {$/", "language": "JavaScript", "kind": "function", "signature": "(lat, lon, key)"}, {"_type": "tag", "name": "owOneCall", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^export async function owOneCall(lat, lon) {$/", "language": "JavaScript", "kind": "function", "signature": "(lat, lon)"}, {"_type": "tag", "name": "owSelfCheck", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^export async function owSelfCheck() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "owSuggestCities", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^export async function owSuggestCities(query, limit = 5) {$/", "language": "JavaScript", "kind": "function", "signature": "(query, limit = 5)"}, {"_type": "tag", "name": "warnIfMissingKeyOnce", "path": "/home/kavia/workspace/code-generation/weather-dashboard-21154-21163/weather_dashboard_frontend/src/api/openWeather.js", "pattern": "/^function warnIfMissingKeyOnce() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}], "hash": "e8ee409f654426ca47fbce6330332035", "format-version": 4, "code-base-name": "weather_dashboard_frontend", "filename": "weather_dashboard_frontend/src/api/openWeather.js", "fields": [{"name": "let didWarnMissingKey = false;", "scope": "", "scopeKind": "", "description": "unavailable"}]}